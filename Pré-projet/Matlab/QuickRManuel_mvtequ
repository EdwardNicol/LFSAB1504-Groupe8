function [dy] = QuickRManuel_mvtequ(t,y)
%Mise en forme de l equation du mouvement

global data  




%1.Coordinate partitioning

    %1.1 Partitionnement des coordonnees generalisee et du Jacobien
  
    qu = data.qu;
    qv = data.qv;
    
   
    data.q(data.qu) = y(1);
    data.qd(data.qu) = y(2);
    
    % Calcul des coordonnees dependantes
    disp(['IN'])
     NewtonRaphson();
    disp(['OUT']) 
    % Calcul de Vd et Vdd
        Jv = data.J(:,data.qv);
        Ju = data.J(:,data.qu);
        Bvu = -Jv\Ju;
        Jdqd = QuickRManuel_cons_jdqd(data);
        b = -Jv\Jdqd;
        data.qd(data.qv) = Bvu*(data.qd(data.qu));
        data.qdd(data.qv) = Bvu*data.qdd(data.qu)+b;
    %1.2 Partitionnement des equations du mouvement
    
    % Calcul de la matrice de Masse
        [data.M,data.c] = QuickRManuel_dirdyna(data);

        Muv = data.M(data.qu,data.qv);
        Muu = data.M(data.qu,data.qu);
        Mvu = data.M(data.qv,data.qu);
        Mvv = data.M(data.qv,data.qv);

        cu = data.c(data.qu);
        cv = data.c(data.qv)';

     % Calcul du vecteur des forces/couples articulaires  
         data.Q = QuickRManuel_artic(data);

         Qu = data.Q(qu);
         Qv = data.Q(qv);
    
    
    %1.3 Mise en equation 
%     sizeBvu = size(Bvu)
%     sizeMuv = size(Muv)
%     sizeMvv = size(Mvv)
%     siezb = size(b)
%     sizecu = size(cu)
%     sizeBvut = size(Bvu')
%     sizecv = size(cv)
%     sizeQu = size(Qu)
%     sizeQv = size(Qv)
    M = Muu + Muv*Bvu+Bvu'*Mvu+Bvu'*Mvv*Bvu;
    F = (Muv+Bvu'*Mvv)*b + (cu+Bvu'*cv) - (Qu+Bvu'*Qv);
    
%2. Changement de variables

    dy(1,1) = y(2);        % ud = w
    dy(2,1) = -F/M; % wd = udd = -F/M

end

