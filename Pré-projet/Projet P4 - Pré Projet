\documentclass[a4paper, 10pt]{article} 
\usepackage[hmargin=2cm, vmargin = 3cm,noheadfoot]{geometry}
\usepackage[utf8x]{inputenc} %ou [utf8]
%!!!Ne marche pas avec \section*{} !!!! 
\usepackage[T1]{fontenc} 
\usepackage[french]{babel} 
\usepackage{lmodern}
\usepackage{graphicx}
\usepackage{tabularx}
\usepackage{array}
\usepackage{empheq}
\usepackage{color}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage{geometry}
%\geometry{top=longueur, bottom=longueur, left=longueur , right=longueur}
\usepackage{enumitem}
\graphicspath{{Images/}}
\usepackage{listings}
\usepackage{fancybox}
\usepackage{color} %red, green, blue, yellow, cyan, magenta, black, white
\definecolor{mygreen}{RGB}{28,172,0} % color values Red, Green, Blue
\definecolor{mylilas}{RGB}{170,55,241}



\title{Projet P4 - Pré Projet}
\author{Js Deneil}
\begin{document}
\maketitle
\tableofcontents

\part{Quick return}

\section{Objectif du pré-projet}

\subsection{Calcul analytique}

\begin{itemize}
\item PPP 
\item Multiplicateurs de Lagrange 
\end{itemize}
$\Rightarrow$ Equations du mouvement

\subsection{Robotran}
$\Rightarrow$ \textbf{générer} ces équations

\section{Approche analytique}

\paragraph{Hypothèses :}
\begin{itemize}[label=$\bullet$]
\item La glissière n'est pas attachées à l'actionneur
\item Le bras n'est pas attaché à la bielle
\end{itemize}
\begin{figure}[h!]
\centering
\includegraphics[scale=0.4]{Schem}
\end{figure}
On se retrouve donc avec \textbf{cinq} corps distincts ! 

On utilise le principe des puissances potentielles afin de calculer les équations du mouvement sur ces corps. Pour ce faire on définit un ensemble de \textbf{cinq} coordonnées généralisées $\textbf{q}$. Il est à noter que par ce choix de coordonnées, il apparaît que l’outil ne pivote pas et se déplace exclusivement horizontalement. 

On impose \textbf{quatre} contraintes cinématique $\textbf{h}$, ce qui nous permet de calculer la \textit{Jacobienne des contraintes} $\textbf{J}$.  Après calcul des équations du mouvement et l'inventaire des forces en action sur chaque corps rigide on peur désormais appliquer le PPP afin d'obtenir les équations du mouvement.

On obtient alors : 
\begin{equation}
M(q)\ddot{q} + c(q,\dot{q},f_{\text{ext}},l_{\text{ext}},g) = Q + J^{T} \lambda
\end{equation}
L'objet principal de ce pré projet consiste à intégrer ces équations du mouvement afin de décrire l'évolution du système. Cette intégration se fera numériquement à l'aide de \textit{MATLAB} et de la fonction \texttt{ode45}, seulement pour pouvoir utiliser cette fonction deux problèmes se présentent
\begin{enumerate}
\item \texttt{ode45} ne permet pas d’intégrer des équations différentielles algébriques (DAEs), c’est à dire des équations différentielles ordinaire (ODEs) couplées avec des contraintes algébriques,
\item \texttt{ode45} ne permet pas d’intégrer des équations du second ordre comme les équations du mouvement.
\end{enumerate}

Pour parer au premier problème nous utiliserons la méthode du \textbf{coordinate partitioning} et pour le second problème, un \textbf{changement de variable judicieux} sera réalisé afin d'obtenir un système d’ODEs du premier ordre de 2n équations.

\subsection{Coordinate partitioning }

Cette méthode nous est expliquée à la page 11 du document S0\_Robotran\_basics.pdf

Afin de résoudre le système suivant :
\begin{align*}
  \left\{
  \begin{aligned}
      &M(q)\ddot{q} + c(q,\dot{q},f_{\text{ext}},l_{\text{ext}},g) = Q + J^{T} \lambda\\ 
		&h(q)=0\\
       & \dot{h}(q,\dot{q}) = J(q)\dot{q} = 0\\
        &\ddot{h}(q,\dot{q},\ddot{q}) = J(q)\ddot{q} + \dot{J}(q,\dot{q})\dot{q}=0
  \end{aligned}
  \right.
\end{align*}
Nous allons tout d'abord calculer le terme $ \dot{J}(q,\dot{q})\dot{q}$ qui n'a pas encore été trouvé. Connaissant $J$ il nous suffit de la dériver :
\begin{align*}
\dot{J} &= \begin{pmatrix}
   0 & -\dot{x}_2\sin\theta_1 - \dot{\theta}_1x_2\cos\theta_1 & -\dot{\theta}_1 \sin\theta_1 & \dot{\theta}_2L_4\cos\theta_2 & 0 \\
   0 & -\dot{x}_2\cos\theta_1 - \dot{\theta}_1x_2\sin\theta_1 & \dot{\theta}_1 \cos\theta_1 & \dot{\theta}_2L_4\sin\theta_2 & 0 \\
   0 & -\dot{\theta}_1L_2\cos\theta_1 & 0 & 0 & \dot{\theta}_3L_5 \cos\theta_3\\
      0 & \dot{\theta}_1L_2\sin\theta_1 & 0 & 0 & \dot{\theta}_3L_5 \sin\theta_3\\
\end{pmatrix}
\end{align*}
On multiplie alors par $\dot{\textbf{q}} = \begin{Bmatrix}
   \dot{x}_1\\ \dot{\theta}_1 \\ \dot{x}_2\\ \dot{\theta}_2 \\ \dot{\theta_3}\\
\end{Bmatrix} $ afin d'obtenir le terme recherché :

\begin{align*}
\dot{J}(q,\dot{q})\dot{q} &= \begin{pmatrix}
(-\dot{x}_2 \sin\theta_1 - \dot{\theta}_1x_2\cos\theta_1)\dot{\theta}_1 -\dot{x}_2\sin\theta_1\dot{\theta}_1 + L_4\cos\theta_2 \dot{\theta}_2^2\\
(\dot{x}_2\cos\theta_1-\dot{\theta}_1x_2\sin\theta_1)\dot{\theta}_1 + \dot{x}_2\cos\theta_1 \dot{\theta}_1 + L_4\sin\theta_2 \dot{\theta}_2^2\\
(-\dot{\theta}_1L_2\cos\theta_1)\dot{\theta}_1 + (\dot{\theta}_3L_5\cos\theta_3)\dot{\theta}_3\\
(-\dot{\theta}_1L_2\sin\theta_1)\dot{\theta}_1 + (\dot{\theta}_3L_5\sin\theta_3)\dot{\theta}_3\\
\end{pmatrix}
\end{align*}
qui représente le terme d'accélération de notre objet, de taille [$m * 1$] 

Revenons maintenant au \textbf{coordinate partitioning} celui se déroule comme suit :
On va tout d'abord séparer le vecteur coordonnée en deux parties : 
\begin{align*}
q = \begin{pmatrix}
u \\ v\\
\end{pmatrix}
\end{align*}
avec $u$ l'ensemble des ($n-m$) coordonnées \textbf{indépendantes} et $v$ l'ensemble des coordonnées \textbf{dépendantes} .
De manière similaire on sépare le Jacobien :
\begin{align*}
J &= \begin{pmatrix}
J_u & J_v\\
\end{pmatrix}
\end{align*}
En choisissant $v$ de manière judicieuse, la matrice $J_v$ de taille [$m * m$] doit être régulière (inversible).

Pour trouver $v$ deux solutions sont possibles, la première consiste à appliquer la \textbf{LU Factorization} sur $J$ et la seconde est de se baser sur un raisonnement intuitif. Notre système étant relativement simple, en appliquant la seconde méthode il apparaît que la seule coordonnée indépendante de notre système est $\theta_2$ donc nous avons :
\begin{align*}
u = \begin{Bmatrix}
\theta_2
\end{Bmatrix} 
\qquad \text{et} \qquad
v = \begin{Bmatrix}
x_1\\ \theta_1 \\ x_2 \\ \theta_3\\
\end{Bmatrix}
\end{align*}

\textcolor{red}{\textsc{Fin de la séance !}}

On peut donc écrire 
\begin{align*}
M(q)\ddot{q} + c(q,\dot{q},f_{\text{ext}},l_{\text{ext}},g) = Q + J^{T} \lambda
\end{align*}
de cette manière : 
\begin{align*}
\begin{pmatrix}
M_{uu} & M_{uv}\\
M_{vu} & M_{vv}\\
\end{pmatrix}
\begin{pmatrix}
\ddot{u}\\ \ddot{v}\\
\end{pmatrix} + 
\begin{pmatrix}
c_u \\ c_v\\
\end{pmatrix}
&= 
\begin{pmatrix}
Q_u \\ Q_v\\
\end{pmatrix}
+ 
\begin{pmatrix}
J_u^t \\ J_v^t
\end{pmatrix}
\lambda
\end{align*}
$J_v$ étant inversible, on élimine les multiplicateurs de Lagranges $\lambda$ inconnus 
\begin{align*}
\begin{pmatrix}
M_{uu} & M_{uv}\\
\end{pmatrix}
\begin{pmatrix}
\ddot{u}\\ \ddot{v}\\
\end{pmatrix}
+
B_{vu}^t \begin{pmatrix}
M_{vu} & M_{vv}\\
\end{pmatrix}
\begin{pmatrix}
\ddot{u}\\ \ddot{v}\\
\end{pmatrix}
+ c_u + B_{vu}^t c_v &= Q_u + B_{vu}^t Q_v
\end{align*}
où l'on défini la \textit{coupling matrix} : $B_{vu} \triangleq -(J_v)^{-1} J_u$. On va résoudre en éliminant les coordonnées dépendantes $v$, pour ce faire nous utiliserons un solveur itératif  à cause des contraintes $\textbf{h}$ qui sont généralement non-linéaires. L'algorithme de \textit{Newton-Raphson} sera donc utilisé ici :
\begin{align*}
v^{k+1} &= v^k - (J_v)^{-1} h |_{v=v^k}
\end{align*}
Ensuite en utilisant les équations 
\begin{align*}
\dot{h}(q,\dot{q}) &= J(q)\dot{q} = 0\\
 \ddot{h}(q,\dot{q},\ddot{q})& = J(q)\ddot{q} + \dot{J}(q,\dot{q})\dot{q} = 0\\
\end{align*}
On trouve les vitesses $\dot{v}$ et accélérations $\ddot{v}$ :
\begin{align*}
\dot{v} &= B_{vu}\dot{u}\\
\ddot{v} &= B_{vu}\ddot{u}+b \quad \text{avec} \quad b \triangleq - J^{-1} (\dot{J}\dot{q})
\end{align*}
On peut donc désormais exprimer le problème uniquement en fonction de $u$, $\dot{u}$\footnote{Même s'il n'apparaît pas explicitement dans la forme finale, on retrouve bel et bien du $\dot{u}$ dans la dernière expression, en effet, on a le terme $F_r(u,\dot{u})$ qui dépend de $\dot{u}$ : 
\begin{align*}
F_r &= \left(M_{uv} + B_{vu}^t M_{vv} \right) b + \left( c_u + B_{vu}^t c_v \right) - \left( Q_u + B_{vu}^tQ_v \right)\\
\text{Où l'on a}\\
&b \triangleq J^{-1} (\dot{J}\dot{q}) = J^{-1} (\begin{pmatrix}
\dot{J_u} & \dot{J_v}\\
\end{pmatrix}\cdot \begin{pmatrix}
\dot{u} \\ \dot{v}\\
\end{pmatrix}) = J^{-1} (\begin{pmatrix}
\dot{J_u} & \dot{J_v}\\
\end{pmatrix}\cdot \begin{pmatrix}
\dot{u} \\ B_{vu}\dot{u}\\
\end{pmatrix})\\
&c \triangleq \begin{pmatrix}
-\dfrac{L_2}{2} m_2 \dot{\theta}_1^2 \cos \theta_1 - m_3 \dot{\theta}_1 \left( x_2 \dot{\theta}_1 \cos \theta_1 + 2 \dot{x}_2 \sin \theta_1\right)\\
2 m_3 x_2 \dot{x}_2 \dot{\theta}_1\\
-m_3 x_2 \dot{\theta}_1^2\\
0\\ 0
\end{pmatrix}\\
&\Rightarrow \begin{pmatrix}
c_u\\ c_v 
\end{pmatrix}
=
\begin{pmatrix}
0\\
-\dfrac{L_2}{2} m_2 \dot{\theta}_1^2 \cos \theta_1 - m_3 \dot{\theta}_1 \left( x_2 \dot{\theta}_1 \cos \theta_1 + 2 \dot{x}_2 \sin \theta_1\right)\\
2 m_3 x_2 \dot{x}_2 \dot{\theta}_1\\
-m_3 x_2 \dot{\theta}_1^2\\
0\\ 
\end{pmatrix}\\
&\text{(pas trop sûr que ce soit bien écrit)}\\
&Q \triangleq \begin{pmatrix}
S_1\\ 0\\ 0\\ T_4\\ 0\\
\end{pmatrix} 
=
\begin{pmatrix}
F \left( \tanh\left( \alpha \left( \dot{x}_1-\beta \right) \right) + \gamma \right)\\ 0\\ 0\\ T_4 (\text{constant})\\ 0
\end{pmatrix}
\end{align*}On retrouve donc bel et bien du $\dot{u}$ dans cette expression} et $\ddot{u}$ :
\begin{align*}
\left( M_{uu} + M_{uv}B_{vu}+B_{vu}^t M_{vu} + B_{vu}^t M_{vv} B_{vu} \right) \ddot{u} + \left( M_{uv} + B_{vu}^t M_{vv} \right) b + \left( c_u + B_{vu}^t c_v \right) - \left( Q_u + B_{vu}^tQ_v \right) &= 0
\end{align*}
Que l'on peut écrire comme 
\begin{align*}
M_r(u) \ddot{u} + F_r(u,\dot{u}) = 0
\end{align*}
Maintenant que nous avons réussi à exprimer les équations du mouvement uniquement en fonction des variables indépendantes, on a réussi à passer d'un système d'équations algébrique à un système de ($n-m$) équations différentielles ordinaires qu'il sera possible d'intégrer avec \texttt{ode45} à condition d'effectuer un changement de variable.

%Mise en page
\pagebreak

\subsection{Changement de variable}

On se retrouve donc avec une équation différentielle ordinaire du second ordre. A l'aide d'un changement de variable, nous allons la transformer en un système d'ODE du premier ordre :

\begin{align*}
\left( M_{uu} + M_{uv}B_{vu}+B_{vu}^t M_{vu} + B_{vu}^t M_{vv} B_{vu} \right) \ddot{u} + \left( M_{uv} + B_{vu}^t M_{vv} \right) b + \left( c_u + B_{vu}^t c_v \right) - \left( Q_u + B_{vu}^tQ_v \right) &= 0\\
\end{align*}
Par soucis de clarté on pose :
\begin{align*}
M_r &= M_{uu} + M_{uv}B_{vu}+B_{vu}^t M_{vu} + B_{vu}^t M_{vv} B_{vu}\\
F_r &= \left( M_{uv} + B_{vu}^t M_{vv} \right) b + \left( c_u + B_{vu}^t c_v \right) - \left( Q_u + B_{vu}^tQ_v \right)\\
\end{align*}
On a donc l'EDO :
\begin{align*}
M_r(u) \ddot{u} + F_r(u,\dot{u}) &= 0
\end{align*}
On pose :
\begin{align*}
w = \dot{u} \qquad\text{ et donc }\qquad \dot{w} = \ddot{u}
\end{align*}
Ce qui nous permet d'écrire :
\begin{align*}
  \left\{
  \begin{aligned}
      \dot{w}&= -\dfrac{F_r}{M_r}\\
		\dot{u}&= w\\
  \end{aligned}
  \right.
\end{align*}
On peut écrire ce système matriciellement comme :
\begin{align*}
\dfrac{d}{dt}\begin{bmatrix}
u\\ w \end{bmatrix} &=
\begin{bmatrix}
0 & 1\\ 0 & 0\\
\end{bmatrix} \cdot 
\begin{bmatrix}
u\\ w
\end{bmatrix}
+
\begin{bmatrix}
0\\ -\dfrac{F_r}{M_r}\\
\end{bmatrix}
\end{align*}

Un tel système d'ODE est compatible avec l'utilisation de la fonction \texttt{ode45}.

\subsection{Résolution Matlab}
%Set MATLAB lstlistings
\lstset{language=Matlab,%
    %basicstyle=\color{red},
    basicstyle=\ttfamily,
    breaklines=true,%
    morekeywords={matlab2tikz},
    keywordstyle=\color{blue},%
    morekeywords=[2]{1}, keywordstyle=[2]{\color{black}},
   identifierstyle=\color{black},%
    stringstyle=\color{mylilas},
    commentstyle=\color{mygreen},%
   frame=single, showstringspaces=false,%without this there will be a symbol in the places where there is a space
    numbers=left,%
    numberstyle={\tiny \color{black}},% size of the numbers
    numbersep=9pt, % this defines how far the numbers are from the text
    emph=[1]{for,end,break},emphstyle=[1]\color{red}, %some words to emphasise
    %emph=[2]{word1,word2}, emphstyle=[2]{style},    
}



La résolution se fera dans un main qui calculera \texttt{ode45} et tracera les graphiques. Mais afin d'améliorer la clarté et d'être plus efficace, nous allons sous diviser les tâches à réaliser en plusieurs sous fonctions

\textcolor{red}{\textsc{Séance 2 - Début}}

Lors de cette séance, nous nous sommes intéressé de plus près à la fonction \texttt{ode45} et comment nous allons l'utiliser dans notre programme.

\subsubsection{Première approche d'ode45}

\paragraph{Définition MATLAB} : \\
\vspace{12pt}
\begin{center}
\shadowbox{Solve nonstiff differential equations; medium order method. \hspace{12pt} \texttt{[T,Y] = ode45(odefun,tspan,y0)}}
\end{center}

\begin{description}
\item[odefun] A function handle that evaluates the right side of the differential equations. All solvers solve systems of equations in the form $y′ = f(t,y)$ or problems that involve a mass matrix, $M(t,y)y′ = f(t,y)$.  The function, \texttt{f = odefun(t,y)}, for a scalar \texttt{t} and a column vector \texttt{y}, must return a column vector \texttt{f} corresponding to $f(t,y)$.
\item[tspan] A vector specifying the interval of integration, $\left[t_0,t_f \right] $. The solver imposes the initial conditions at \texttt{tspan(1)}, and integrates from \texttt{tspan(1)} to \texttt{tspan(end)}. To obtain solutions at specific times (all increasing or all decreasing), use \texttt{tspan = $\left[t_0,t_1,...,t_f\right]$}.
\item[y0] A vector of initial conditions.
\item[T] Column vector of time points.
\item[Y] Solution array. Each row in Y corresponds to the solution at a time returned in the corresponding row of T.
\end{description}

\paragraph{Résumé} Voici un post du forum EPL qui synthéthise le tout :
\begin{figure}[h!]
\centering
\includegraphics[scale=0.5]{ODE45}
\caption{Pour compléter la phrase : "... par exemple :  @(x,y)f(x,y)"}
\end{figure}

\subsubsection{Exemple vu en séance}

En séance, il nous a été expliqué que \texttt{ode45} était une méthode numérique \emph{explicite}, c'est à dire (pour résumer en gros) qu'elle part d'une condition initiale, elle calcule la pente de la fonction, évalue cette fonction pour un pas de temps, recalcule la pente au nouveau point, ré-évalue à nouveau sur un pas de temps et ainsi de suite. Il faut donc une fonction pour pouvoir calculer cette pente.

Soit pour exemple un système masse-ressort, l'équation différentielle du mouvement d'un tel système est la suivante :
\begin{align*}
m \ddot{x} + c \dot{x} + kx &= 0
\end{align*}

Tout comme dans notre pré projet, nous sommes confrontés au problème du changement de variables... On va poser :
\begin{align*}
\textbf{y} = \dot{x} \Rightarrow \textbf{y} = \begin{pmatrix}
y_1\\ y_2
\end{pmatrix} = \begin{pmatrix}
x\\ \dot{x}
\end{pmatrix}
\end{align*}
On peut donc réécrire l'équation sous forme du système :
\begin{align*}
\dot{y} = \ddot{x} &= \begin{pmatrix}
\dot{y}_1\\ \dot{y}_2
\end{pmatrix} = \begin{pmatrix}
y_2\\ -\dfrac{cy_2 + ky_1}{m}
\end{pmatrix}
\end{align*}

Un tel système se résout de cette manière avec \texttt{ode45}

\lstinputlisting{ode45_seance2.m}


\subsubsection{Résolutions}

Dans un premier temps nous avons réalisé une base de donnée ainsi que plusieurs fonctions qui seront utiles par la suite. 

Afin de pouvoir utiliser \texttt{ode45}, nous avons besoin de conditions initiales. Dans la consigne, il nous est donné que :
\begin{align*}
\hat{\textbf{I}}_1 = \hat{\textbf{Y}}_1 \Rightarrow \theta_2 = 0 \qquad \text{ainsi que} \qquad \dot{\theta}_2 = 0
\end{align*}

Connaissant la coordonnée indépendante, nous allons pouvoir trouver les autres coordonnées en utilisant les contraintes entre les coordonnées généralisées.
\begin{align*}
h_1 &\triangleq -L_4 \cos \theta_2 - a_1 + x_1 + x_2 \cos \theta_1 &= 0\\
h_2 &\triangleq -L_4 \sin \theta_2 - a_2 \qquad + x_2 \sin \theta_1 &= 0\\
h_3 &\triangleq -L_5 \cos \theta_3 \qquad + x_1 + L_2  \cos \theta_1 &= 0\\
h_4 &\triangleq -L_5 \sin \theta_3 - b_2 \qquad + L_2  \sin \theta_1 &= 0\\
\end{align*}

Ce système d'équation est donnée par la fonction \texttt{QuickRManuel\_cons\_hJ.m} qui renvoie un vecteur composé des quatres équations et une matrice contenant la jacobienne des contraintes. Il faut donc résoudre le système représente par un vecteur de variables symboliques avec MATLAB afin de trouver les valeurs initiales. Pour l'instant, nous utilisons le code suivant, qui n'est pas encore au point (Camille, tu dois te renseigner près de ta nouvelle copine) :
 
\lstinputlisting{test.m}

\textcolor{red}{\textsc{Séance 2 - Fin}}
\section{Robotran}
\appendix

\section{Codes Matlab}
\subsection{data.m}
Structure contenant toutes les données du problème :
\lstinputlisting{data.m}

\subsection{QuickRManuel\_cons\_hJ.m}

\lstinputlisting{QuickRManuel_cons_hJ.m}

\subsection{QuickRManuel\_cons\_jdqd.m}

\lstinputlisting{QuickRManuel_cons_jdqd.m}

\subsection{QuickRManuel\_dirdyna.m}

\lstinputlisting{QuickRManuel_dirdyna.m}

\subsection{QuickRManuel\_artic.m}

\lstinputlisting{QuickRManuel_artic.m}

\subsection{QuickRManuel\_mvtequ.m}

On va écrire ici l'équation du mouvement trouvée analytiquement et y appliquer le changement de variable afin d'obtenir le système d'ODE. 
\lstinputlisting{QuickRManuel_mvtequ.m}

\subsection{QuickRManuel\_main.m}
Premier essai du main, \textcolor{red}{pas encore au point}
\lstinputlisting{QuickRManuel_main.m}



\end{document}



















